
# OBJECT_OT_，VIEW3D_PT_，VIEW3D_OT_

#测试用
import bpy
selection=bpy.context.selected_objects
from .cxl import cxl_namebytime
#--------------------------------------------------------------------------
# import bpy
# a=bpy.data.node_groups["几何节点"].nodes["四边形.001"].mode
# print(a)



def c_zhuankuai_node_tree(obj):  # 平面修改器节点数据,
    newname = 'c_zhuankuai' + cxl_namebytime()
    thenodetree = bpy.data.node_groups.new(newname, 'GeometryNodeTree')
    thenodetree.interface.new_socket(name='Geometry', description='c_zhuankuai',in_out='INPUT', socket_type='NodeSocketGeometry', parent=None)
    thenodetree.interface.new_socket(name='Geometry', description='c_zhuankuai',in_out='OUTPUT', socket_type='NodeSocketGeometry', parent=None)
    temp=thenodetree.interface.new_socket(name='长', description='length',in_out='INPUT', socket_type='NodeSocketFloat', parent=None)
    temp.subtype='DISTANCE';temp.default_value=1500
    temp=thenodetree.interface.new_socket(name='宽', description='width',in_out='INPUT', socket_type='NodeSocketFloat', parent=None)
    temp.subtype='DISTANCE';temp.default_value=750
    temp=thenodetree.interface.new_socket(name='高', description='height',in_out='INPUT', socket_type='NodeSocketFloat', parent=None)
    temp.subtype='DISTANCE';temp.default_value=7
    temp=thenodetree.interface.new_socket(name='倒角', description='Chamfer',in_out='INPUT', socket_type='NodeSocketFloat', parent=None)
    temp.default_value=3
    temp=thenodetree.interface.new_socket(name='偏移', description='offset',in_out='INPUT', socket_type='NodeSocketFloat', parent=None)
    temp.default_value=0.5 ; temp.min_value=0 ; temp.max_value=1
    temp=thenodetree.interface.new_socket(name='缝隙', description='gap',in_out='INPUT', socket_type='NodeSocketFloat', parent=None)
    temp.default_value=3 ; temp.min_value=0 ; temp.max_value=1

    thenodetree.interface.new_socket(name='c_uv', description='uv属性名称', in_out='OUTPUT', socket_type='NodeSocketVector', parent=None)

    # 节点
    thenodes = ["NodeGroupInput","NodeGroupOutput","GeometryNodeCurvePrimitiveQuadrilateral","GeometryNodeBoundBox","ShaderNodeSeparateXYZ","ShaderNodeVectorMath","ShaderNodeMath","GeometryNodePoints","ShaderNodeMath","GeometryNodeInputIndex","ShaderNodeMath","ShaderNodeCombineXYZ","GeometryNodeInstanceOnPoints","ShaderNodeMath","ShaderNodeMath","ShaderNodeSeparateXYZ","ShaderNodeMath","ShaderNodeMath","ShaderNodeMath","NodeReroute","ShaderNodeMath","ShaderNodeMath","NodeReroute","NodeReroute","ShaderNodeMath","ShaderNodeMath","ShaderNodeMath","ShaderNodeMath","NodeReroute","ShaderNodeMath","NodeReroute","ShaderNodeMath","ShaderNodeMath","ShaderNodeMath","NodeReroute","GeometryNodeFillCurve","GeometryNodeScaleElements","GeometryNodeExtrudeMesh","ShaderNodeCombineXYZ","GeometryNodeExtrudeMesh","GeometryNodeScaleElements","ShaderNodeCombineXYZ","NodeReroute","GeometryNodeCurveToMesh","GeometryNodeMeshToCurve","GeometryNodeFillCurve","GeometryNodeExtrudeMesh","ShaderNodeCombineXYZ","GeometryNodeTransform","ShaderNodeCombineXYZ","GeometryNodeFlipFaces","GeometryNodeTransform","GeometryNodeJoinGeometry","GeometryNodeMergeByDistance","GeometryNodeMeshBoolean","GeometryNodeFlipFaces","GeometryNodeJoinGeometry","GeometryNodeMergeByDistance","NodeReroute","GeometryNodeRealizeInstances","ShaderNodeMath","NodeReroute","ShaderNodeMath","ShaderNodeMath","ShaderNodeMath","GeometryNodeSwitch","ShaderNodeMath","FunctionNodeCompare","ShaderNodeMath","NodeReroute","NodeReroute","NodeReroute","GeometryNodeScaleElements","GeometryNodeScaleElements","ShaderNodeMath","ShaderNodeMath","ShaderNodeMath","ShaderNodeMath","NodeReroute","ShaderNodeValue","ShaderNodeMath","ShaderNodeMath","ShaderNodeMath","GeometryNodeSetMaterial","GeometryNodeInputPosition","ShaderNodeSeparateXYZ","ShaderNodeMath","NodeReroute","NodeReroute","ShaderNodeMath","ShaderNodeCombineXYZ","GeometryNodeSampleIndex","GeometryNodeInputIndex","NodeReroute","ShaderNodeVectorMath","GeometryNodeDuplicateElements","GeometryNodeMergeByDistance","ShaderNodeMath","ShaderNodeMath","ShaderNodeMath","ShaderNodeMath","NodeReroute","ShaderNodeMath","ShaderNodeMath","ShaderNodeMath","FunctionNodeCompare","ShaderNodeMath","GeometryNodeSwitch","ShaderNodeMath","NodeReroute","NodeReroute","NodeReroute","NodeReroute","NodeReroute","NodeReroute","ShaderNodeMath","ShaderNodeMath","ShaderNodeMath"]
    # 坐标
    thelocations = [(-2929.4067, 495.9701), (11666.4082, 1762.7635), (186.9068, -58.8816), (-1165.2179, 2498.3774), (-728.6229, 2496.5398), (-951.5089, 2513.4236), (35.5220, 2625.6355), (4530.0601, 2316.4570), (-233.2426, 2593.3438), (1880.2579, 1765.8936), (2649.6045, 2075.5876), (4270.9214, 2019.8867), (4927.0034, 1755.5188), (2835.0334, 668.0764), (3252.4387, 830.8051), (1163.9688, 2446.6108), (2413.9946, 2180.7908), (2893.7480, 2316.0703), (3204.4546, 2109.0693), (-855.7649, 2957.1040), (59.1958, 2384.8533), (-168.7966, 2376.5906), (-644.8998, 1299.0365), (-681.0065, 854.3154), (809.0980, 2869.7524), (2096.6963, 1509.2520), (2424.4902, 1544.8405), (3178.8179, 1141.8464), (2074.3684, 762.9046), (4067.9897, 1500.2817), (4713.7993, -24.7017), (2777.3215, 1825.8768), (3228.0906, 1892.7858), (3568.3306, 2005.6588), (121.2588, -1135.6410), (509.7087, -61.8772), (1088.2268, -87.3779), (2129.8176, -222.3726), (1265.5165, -880.8890), (2595.3152, -178.1118), (3126.8237, -121.8509), (1351.5352, -1099.3302), (114.3228, -1229.2782), (561.0939, -2359.4761), (820.2743, -2347.8486), (1079.3566, -2334.9275), (1549.3787, -2476.6763), (1223.6865, -2624.1567), (2128.6008, -2452.3572), (1813.0015, -2285.7366), (1510.9749, -2090.6584), (2140.6912, -2022.5192), (2764.0781, -2132.2305), (3138.2144, -2105.8662), (5850.4004, 1888.3627), (1937.0771, 14.3710), (3813.5542, -32.3131), (4104.1255, -31.6076), (5724.6016, -929.3169), (5191.6621, 1775.8710), (268.7684, 2692.1702), (588.9971, 2472.4185), (274.9197, 2410.0864), (3946.2622, 2002.9446), (2973.7034, 1398.1105), (3579.7708, 1709.5715), (2907.0581, 1596.7627), (3222.8560, 1655.4028), (382.9257, -699.0284), (121.2588, -1135.6410), (513.9174, -448.5112), (513.9174, -448.5112), (1352.3927, -96.8690), (3468.4668, -220.0506), (674.6951, -568.6982), (886.3536, -598.4311), (1154.2208, -526.2344), (658.8864, -735.4658), (1009.0162, -559.8973), (2470.2524, -499.8316), (2728.9019, -622.4915), (3000.2490, -744.6679), (3198.6045, -541.3414), (11148.7812, 1784.1393), (6328.5830, 1127.3391), (7297.4780, 904.8206), (9426.1172, 986.6379), (7323.6934, 213.2976), (7311.1514, 79.3019), (9883.8682, 540.6947), (10594.7881, 956.0269), (6751.0103, 1217.5261), (6330.4033, 1034.6160), (6914.9253, 2920.9785), (7013.0161, 1212.9691), (6062.2627, 1906.4653), (6292.6274, 1905.8110), (9903.2256, 994.6819), (9450.8838, 760.3630), (10202.7842, 680.6830), (9900.5391, 225.5296), (7319.6226, 524.3386), (7828.8203, 1227.2506), (8226.5410, 1262.3857), (8016.9961, 1244.8557), (8436.3604, 1279.1383), (10228.2646, 1023.2164), (8685.7061, 1208.7509), (9031.8818, 1032.0461), (383.4409, 2823.7961), (2026.8809, 369.2538), (1104.8041, 1291.4377), (1283.5378, 1914.0181), (-686.6010, 1100.1462), (-469.9218, -361.5779), (-1791.2787, 446.1364), (-2010.8390, 413.4064), (1108.5917, -1159.2837)]
    # 连线
    thelianxian = [[0, 3],[5, 4],[3, 5],[3, 5],[22, 2],[23, 2],[8, 6],[0, 6],[4, 8],[22, 8],[111, 10],[9, 10],[11, 7],[30, 12],[110, 13],[13, 14],[109, 15],[111, 16],[15, 17],[16, 17],[17, 18],[10, 18],[3, 19],[21, 20],[4, 21],[23, 21],[7, 12],[0, 22],[0, 23],[62, 24],[61, 24],[24, 7],[9, 25],[112, 25],[25, 26],[110, 27],[26, 27],[15, 28],[28, 14],[27, 29],[14, 29],[29, 11],[57, 30],[111, 31],[112, 31],[26, 32],[31, 32],[18, 33],[32, 33],[63, 11],[0, 34],[2, 35],[35, 36],[72, 37],[38, 37],[37, 39],[37, 39],[39, 40],[39, 40],[41, 39],[34, 38],[117, 41],[0, 42],[0, 43],[43, 44],[44, 45],[45, 46],[47, 46],[46, 48],[49, 48],[45, 50],[50, 51],[49, 51],[48, 52],[51, 52],[52, 53],[73, 56],[55, 56],[56, 57],[53, 58],[12, 59],[59, 54],[58, 54],[6, 60],[60, 61],[20, 62],[33, 63],[113, 64],[64, 65],[65, 63],[26, 66],[66, 67],[67, 65],[111, 64],[22, 68],[23, 68],[114, 71],[36, 72],[40, 73],[71, 74],[74, 75],[75, 76],[78, 76],[71, 36],[68, 77],[77, 75],[76, 72],[71, 78],[72, 55],[79, 40],[80, 81],[81, 82],[77, 81],[79, 80],[79, 82],[82, 73],[39, 73],[83, 1],[59, 54],[111, 87],[110, 88],[92, 91],[84, 91],[87, 86],[91, 94],[93, 94],[94, 85],[85, 89],[88, 89],[90, 1],[54, 95],[95, 96],[86, 97],[87, 98],[98, 97],[100, 99],[89, 99],[99, 90],[88, 100],[96, 91],[96, 83],[64, 101],[85, 102],[88, 102],[102, 104],[104, 103],[103, 105],[105, 107],[97, 106],[106, 90],[108, 86],[85, 108],[101, 107],[107, 108],[19, 93],[19, 109],[23, 110],[22, 111],[61, 112],[0, 113],[115, 114],[116, 115],[0, 116],[42, 117]]
    # 插槽位置
    thechacao = [[0, 0],[0, 0],[1, 1],[2, 0],[0, 0],[0, 1],[0, 0],[1, 1],[0, 0],[0, 1],[0, 0],[0, 1],[0, 1],[0, 2],[0, 0],[0, 1],[0, 0],[0, 0],[0, 0],[0, 1],[0, 0],[0, 1],[1, 0],[0, 0],[1, 0],[0, 1],[0, 0],[1, 0],[2, 0],[0, 1],[0, 0],[0, 0],[0, 0],[0, 1],[0, 0],[0, 1],[0, 0],[1, 0],[0, 0],[0, 0],[0, 1],[0, 1],[0, 0],[0, 0],[0, 1],[0, 1],[0, 0],[0, 0],[0, 1],[0, 0],[3, 0],[0, 0],[0, 0],[0, 0],[0, 2],[0, 0],[1, 1],[0, 0],[1, 1],[0, 2],[0, 2],[0, 2],[4, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 2],[0, 0],[0, 1],[0, 0],[0, 0],[0, 1],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 1],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 1],[0, 1],[0, 0],[0, 0],[0, 0],[0, 1],[0, 0],[0, 1],[0, 0],[0, 0],[0, 0],[0, 1],[0, 0],[0, 1],[0, 0],[0, 2],[0, 1],[0, 1],[0, 2],[0, 0],[0, 0],[0, 2],[0, 0],[0, 1],[0, 1],[0, 1],[0, 0],[0, 2],[1, 1],[0, 0],[0, 1],[0, 0],[0, 0],[0, 2],[0, 1],[0, 1],[0, 0],[0, 1],[0, 0],[1, 0],[0, 1],[0, 1],[0, 0],[0, 0],[0, 0],[0, 1],[0, 1],[0, 1],[0, 0],[0, 1],[0, 1],[0, 0],[0, 0],[0, 0],[1, 0],[0, 1],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 1],[0, 1],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[0, 0],[5, 0],[0, 0],[0, 1],[6, 0],[0, 0]]

    nds = []
    for i in range(len(thenodes)):
        temp = thenodetree.nodes.new(thenodes[i])
        temp.location = thelocations[i]
        nds.append(temp)

    nds[83].name = 'c_setMaterial_value'
    if obj.active_material == None:
        nds[83].inputs[2].default_value = cxl_tishicaizhi_get()
    else:
        nds[83].inputs[2].default_value = obj.active_material
    nds[2].mode='RECTANGLE' ;nds[2].inputs[0].default_value=2.0 ;nds[2].inputs[1].default_value=2.0 ;nds[4].inputs[0].default_value[0]=0.0 ;nds[4].inputs[0].default_value[1]=0.0 ;nds[4].inputs[0].default_value[2]=0.0 ;nds[5].operation='SUBTRACT' ;nds[5].inputs[0].default_value[0]=0.0 ;nds[5].inputs[0].default_value[1]=0.0 ;nds[5].inputs[0].default_value[2]=0.0 ;nds[5].inputs[1].default_value[0]=0.0 ;nds[5].inputs[1].default_value[1]=0.0 ;nds[5].inputs[1].default_value[2]=0.0 ;nds[6].operation='CEIL' ;nds[6].use_clamp=False ;nds[6].inputs[0].default_value=0.5 ;nds[7].inputs[0].default_value=1 ;nds[7].inputs[1].default_value[0]=0.0 ;nds[7].inputs[1].default_value[1]=0.0 ;nds[7].inputs[1].default_value[2]=0.0 ;nds[7].inputs[2].default_value=0.10000000149011612 ;nds[8].operation='DIVIDE' ;nds[8].use_clamp=False ;nds[8].inputs[0].default_value=0.5 ;nds[8].inputs[1].default_value=0.5 ;nds[10].operation='MULTIPLY' ;nds[10].use_clamp=False ;nds[10].inputs[0].default_value=0.5 ;nds[10].inputs[1].default_value=0.5 ;nds[11].inputs[0].default_value=0.0 ;nds[11].inputs[1].default_value=0.0 ;nds[11].inputs[2].default_value=0.0 ;nds[12].inputs[3].default_value=False ;nds[12].inputs[5].default_value[0]=0.0 ;nds[12].inputs[5].default_value[1]=0.0 ;nds[12].inputs[5].default_value[2]=0.0 ;nds[12].inputs[6].default_value[0]=1.0 ;nds[12].inputs[6].default_value[1]=1.0 ;nds[12].inputs[6].default_value[2]=1.0 ;nds[13].operation='DIVIDE' ;nds[13].use_clamp=False ;nds[13].inputs[0].default_value=0.5 ;nds[13].inputs[1].default_value=2.0 ;nds[14].operation='ADD' ;nds[14].use_clamp=False ;nds[14].inputs[0].default_value=0.5 ;nds[14].inputs[1].default_value=2.0 ;nds[15].inputs[0].default_value[0]=0.0 ;nds[15].inputs[0].default_value[1]=0.0 ;nds[15].inputs[0].default_value[2]=0.0 ;nds[16].operation='DIVIDE' ;nds[16].use_clamp=False ;nds[16].inputs[0].default_value=0.5 ;nds[16].inputs[1].default_value=2.0 ;nds[17].operation='ADD' ;nds[17].use_clamp=False ;nds[17].inputs[0].default_value=0.5 ;nds[17].inputs[1].default_value=2.0 ;nds[18].operation='ADD' ;nds[18].use_clamp=False ;nds[18].inputs[0].default_value=0.5 ;nds[18].inputs[1].default_value=2.0 ;nds[20].operation='CEIL' ;nds[20].use_clamp=False ;nds[20].inputs[0].default_value=0.5 ;nds[21].operation='DIVIDE' ;nds[21].use_clamp=False ;nds[21].inputs[0].default_value=0.5 ;nds[21].inputs[1].default_value=0.5 ;nds[24].operation='MULTIPLY' ;nds[24].use_clamp=False ;nds[24].inputs[0].default_value=0.5 ;nds[24].inputs[1].default_value=0.5 ;nds[25].operation='DIVIDE' ;nds[25].use_clamp=False ;nds[25].inputs[0].default_value=0.5 ;nds[25].inputs[1].default_value=0.5 ;nds[26].operation='FLOOR' ;nds[26].use_clamp=False ;nds[26].inputs[0].default_value=0.5 ;nds[27].operation='MULTIPLY' ;nds[27].use_clamp=False ;nds[27].inputs[0].default_value=0.5 ;nds[27].inputs[1].default_value=2.0 ;nds[29].operation='ADD' ;nds[29].use_clamp=False ;nds[29].inputs[0].default_value=0.5 ;nds[29].inputs[1].default_value=2.0 ;nds[31].operation='MULTIPLY' ;nds[31].use_clamp=False ;nds[31].inputs[0].default_value=0.5 ;nds[31].inputs[1].default_value=2.0 ;nds[32].operation='MULTIPLY' ;nds[32].use_clamp=False ;nds[32].inputs[0].default_value=0.5 ;nds[32].inputs[1].default_value=2.0 ;nds[33].operation='SUBTRACT' ;nds[33].use_clamp=False ;nds[33].inputs[0].default_value=0.5 ;nds[33].inputs[1].default_value=2.0 ;nds[35].mode='NGONS' ;nds[36].domain='FACE' ;nds[36].scale_mode='SINGLE_AXIS' ;nds[36].inputs[2].default_value=1.0 ;nds[36].inputs[4].default_value[0]=1.0 ;nds[36].inputs[4].default_value[1]=0.0 ;nds[36].inputs[4].default_value[2]=0.0 ;nds[37].mode='FACES' ;nds[37].inputs[3].default_value=1.0 ;nds[38].inputs[0].default_value=0.0 ;nds[38].inputs[1].default_value=0.0 ;nds[38].inputs[2].default_value=0.0010000000474974513 ;nds[39].mode='FACES' ;nds[39].inputs[3].default_value=1.0 ;nds[40].domain='FACE' ;nds[40].scale_mode='SINGLE_AXIS' ;nds[40].inputs[2].default_value=1.0 ;nds[40].inputs[4].default_value[0]=1.0 ;nds[40].inputs[4].default_value[1]=0.0 ;nds[40].inputs[4].default_value[2]=0.0 ;nds[41].inputs[0].default_value=0.0 ;nds[41].inputs[1].default_value=0.0 ;nds[41].inputs[2].default_value=0.003000000026077032 ;nds[43].inputs[2].default_value=False ;nds[45].mode='TRIANGLES' ;nds[46].mode='FACES' ;nds[46].inputs[3].default_value=1.0 ;nds[47].inputs[0].default_value=0.0 ;nds[47].inputs[1].default_value=0.0 ;nds[47].inputs[2].default_value=1.0 ;nds[48].mode='COMPONENTS' ;nds[48].inputs[1].default_value[0]=0.0 ;nds[48].inputs[1].default_value[1]=0.0 ;nds[48].inputs[1].default_value[2]=0.0 ;nds[48].inputs[2].default_value[0]=0.0 ;nds[48].inputs[2].default_value[1]=0.0 ;nds[48].inputs[2].default_value[2]=0.0 ;nds[48].inputs[3].default_value[0]=1.0 ;nds[48].inputs[3].default_value[1]=1.0 ;nds[48].inputs[3].default_value[2]=1.0 ;nds[49].inputs[0].default_value=0.0 ;nds[49].inputs[1].default_value=0.0 ;nds[49].inputs[2].default_value=-0.5 ;nds[51].mode='COMPONENTS' ;nds[51].inputs[1].default_value[0]=0.0 ;nds[51].inputs[1].default_value[1]=0.0 ;nds[51].inputs[1].default_value[2]=0.0 ;nds[51].inputs[2].default_value[0]=0.0 ;nds[51].inputs[2].default_value[1]=0.0 ;nds[51].inputs[2].default_value[2]=0.0 ;nds[51].inputs[3].default_value[0]=1.0 ;nds[51].inputs[3].default_value[1]=1.0 ;nds[51].inputs[3].default_value[2]=1.0 ;nds[53].mode='ALL' ;nds[53].inputs[2].default_value=9.999999974752427e-07 ;nds[54].operation='INTERSECT' ;nds[54].solver='EXACT' ;nds[54].inputs[2].default_value=False ;nds[54].inputs[3].default_value=False ;nds[57].mode='ALL' ;nds[57].inputs[2].default_value=1.0000000656873453e-05 ;nds[59].inputs[2].default_value=True ;nds[59].inputs[3].default_value=0 ;nds[60].operation='ADD' ;nds[60].use_clamp=False ;nds[60].inputs[0].default_value=0.5 ;nds[60].inputs[1].default_value=1.0 ;nds[62].operation='ADD' ;nds[62].use_clamp=False ;nds[62].inputs[0].default_value=0.5 ;nds[62].inputs[1].default_value=1.0 ;nds[63].operation='SUBTRACT' ;nds[63].use_clamp=False ;nds[63].inputs[0].default_value=0.5 ;nds[63].inputs[1].default_value=0.0 ;nds[64].operation='MULTIPLY' ;nds[64].use_clamp=False ;nds[64].inputs[0].default_value=0.5 ;nds[64].inputs[1].default_value=0.5 ;nds[65].input_type='FLOAT' ;nds[65].inputs[1].default_value=False ;nds[65].inputs[2].default_value=False ;nds[66].operation='FLOORED_MODULO' ;nds[66].use_clamp=False ;nds[66].inputs[0].default_value=0.5 ;nds[66].inputs[1].default_value=2.0 ;nds[67].data_type='FLOAT' ;nds[67].operation='GREATER_THAN' ;nds[67].inputs[0].default_value=0.0 ;nds[67].inputs[1].default_value=0.0 ;nds[68].operation='DIVIDE' ;nds[68].use_clamp=False ;nds[68].inputs[0].default_value=0.5 ;nds[68].inputs[1].default_value=1000.0 ;nds[72].domain='FACE' ;nds[72].scale_mode='SINGLE_AXIS' ;nds[72].inputs[2].default_value=1.0 ;nds[72].inputs[4].default_value[0]=0.0 ;nds[72].inputs[4].default_value[1]=1.0 ;nds[72].inputs[4].default_value[2]=0.0 ;nds[73].domain='FACE' ;nds[73].scale_mode='SINGLE_AXIS' ;nds[73].inputs[2].default_value=1.0 ;nds[73].inputs[4].default_value[0]=0.0 ;nds[73].inputs[4].default_value[1]=1.0 ;nds[73].inputs[4].default_value[2]=0.0 ;nds[74].operation='SUBTRACT' ;nds[74].use_clamp=False ;nds[74].inputs[0].default_value=1.0 ;nds[74].inputs[1].default_value=0.0 ;nds[75].operation='MULTIPLY' ;nds[75].use_clamp=False ;nds[75].inputs[0].default_value=1.0 ;nds[75].inputs[1].default_value=0.0 ;nds[76].operation='ADD' ;nds[76].use_clamp=False ;nds[76].inputs[0].default_value=1.0 ;nds[76].inputs[1].default_value=0.0 ;nds[77].operation='SUBTRACT' ;nds[77].use_clamp=False ;nds[77].inputs[0].default_value=1.0 ;nds[77].inputs[1].default_value=0.0 ;nds[79].outputs[0].default_value=0.9900000095367432 ;nds[80].operation='SUBTRACT' ;nds[80].use_clamp=False ;nds[80].inputs[0].default_value=1.0 ;nds[80].inputs[1].default_value=0.0 ;nds[81].operation='MULTIPLY' ;nds[81].use_clamp=False ;nds[81].inputs[0].default_value=1.0 ;nds[81].inputs[1].default_value=0.0 ;nds[82].operation='ADD' ;nds[82].use_clamp=False ;nds[82].inputs[0].default_value=1.0 ;nds[82].inputs[1].default_value=0.0 ;nds[85].inputs[0].default_value[0]=0.0 ;nds[85].inputs[0].default_value[1]=0.0 ;nds[85].inputs[0].default_value[2]=0.0 ;nds[86].operation='MODULO' ;nds[86].use_clamp=False ;nds[86].inputs[0].default_value=0.5 ;nds[86].inputs[1].default_value=2.0 ;nds[89].operation='MODULO' ;nds[89].use_clamp=False ;nds[89].inputs[0].default_value=0.5 ;nds[89].inputs[1].default_value=2.0 ;nds[90].inputs[0].default_value=0.0 ;nds[90].inputs[1].default_value=0.0 ;nds[90].inputs[2].default_value=0.0 ;nds[91].data_type='FLOAT_VECTOR' ;nds[91].domain='POINT' ;nds[91].clamp=False ;nds[91].inputs[2].default_value=0 ;nds[94].operation='SUBTRACT' ;nds[94].inputs[0].default_value[0]=0.0 ;nds[94].inputs[0].default_value[1]=0.0 ;nds[94].inputs[0].default_value[2]=0.0 ;nds[94].inputs[1].default_value[0]=0.0 ;nds[94].inputs[1].default_value[1]=0.0 ;nds[94].inputs[1].default_value[2]=0.0 ;nds[95].domain='FACE' ;nds[95].inputs[2].default_value=1 ;nds[96].mode='ALL' ;nds[96].inputs[2].default_value=1.0000000656873453e-05 ;nds[97].operation='MULTIPLY' ;nds[97].use_clamp=False ;nds[97].inputs[0].default_value=0.5 ;nds[97].inputs[1].default_value=0.5 ;nds[98].operation='DIVIDE' ;nds[98].use_clamp=False ;nds[98].inputs[0].default_value=1.0 ;nds[98].inputs[1].default_value=0.5 ;nds[99].operation='MULTIPLY' ;nds[99].use_clamp=False ;nds[99].inputs[0].default_value=0.5 ;nds[99].inputs[1].default_value=0.5 ;nds[100].operation='DIVIDE' ;nds[100].use_clamp=False ;nds[100].inputs[0].default_value=1.0 ;nds[100].inputs[1].default_value=0.5 ;nds[102].operation='DIVIDE' ;nds[102].use_clamp=False ;nds[102].inputs[0].default_value=0.5 ;nds[102].inputs[1].default_value=2.0 ;nds[103].operation='FLOOR' ;nds[103].use_clamp=False ;nds[103].inputs[0].default_value=0.5 ;nds[104].operation='MODULO' ;nds[104].use_clamp=False ;nds[104].inputs[0].default_value=0.5 ;nds[104].inputs[1].default_value=2.0 ;nds[105].data_type='FLOAT' ;nds[105].operation='GREATER_EQUAL' ;nds[105].inputs[0].default_value=0.0 ;nds[105].inputs[1].default_value=1.0 ;nds[106].operation='ADD' ;nds[106].use_clamp=False ;nds[106].inputs[0].default_value=0.5 ;nds[106].inputs[1].default_value=2.0 ;nds[107].input_type='FLOAT' ;nds[107].inputs[1].default_value=False ;nds[107].inputs[2].default_value=False ;nds[108].operation='ADD' ;nds[108].use_clamp=False ;nds[108].inputs[0].default_value=0.0 ;nds[108].inputs[1].default_value=0.0 ;nds[115].operation='SUBTRACT' ;nds[115].use_clamp=False ;nds[115].inputs[0].default_value=1.0 ;nds[115].inputs[1].default_value=0.5 ;nds[116].operation='DIVIDE' ;nds[116].use_clamp=False ;nds[116].inputs[0].default_value=1.0 ;nds[116].inputs[1].default_value=1000.0 ;nds[117].operation='DIVIDE' ;nds[117].use_clamp=False ;nds[117].inputs[0].default_value=1.0 ;nds[117].inputs[1].default_value=1000.0



    for i in range(len(thelianxian)):
        thenodetree.links.new(nds[thelianxian[i][0]].outputs[thechacao[i][0]],nds[thelianxian[i][1]].inputs[thechacao[i][1]])
    # ---------------------
    return (thenodetree)
    

